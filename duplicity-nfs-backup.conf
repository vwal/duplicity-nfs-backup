#
# duplicity-nfs-backup configuration
#
# Note: These options are read when the duplicity-nfs-backup script is run manually.
#
# Note: This file is kept by default in the same directory as duplicity-nfs-backup script,
# but if you want to move it to, say, to '/etc', modify the 'CONFIG_FILE' parameter on the
# top of duplicity-nfs-backup script.

# Individual duplicity-backup configurations are defined here. Each backup dataset
# has two or three parameters, separated by a delimiter that by default is pipe ("|"), 
# but if need be, you can change it further below. The parameters are as follow 
# (in the following order):
#
# - Target directory for the backup; this is the actual path you want the backup to be saved.
#   This is a required parameter. If the target directory is unaccessible (such as when the hosting
#   NFS share is not available, or is stale), the backup for the backup dataset will not proceed,
#   and a log/syslog warning is issued.
#
# - duplicity-backup configuration file for this backup dataset; if you have multiple backup 
#   datasets, you almost certainly want to have a separate duplicity-backup configuration file 
#   for each.  This is a required parameter; if the configuration file is not accessible, the
#   backup for the dataset will not proceed and a log/syslog warning is issued.
#
# - Name of the remote test file (optional; usually a static, unmutable file placed in the backup
#   directory on the the remote share. It is used to detect whether the backup directory content 
#   is accessible). Since this script is intended to be used to back up on mounted NFS shares, 
#   use of this test file ensures you're backing up to the actual remote backup directory, and not 
#   to an unmounted local or remote mountpoint (remote empty mountpoint can occur even when the 
#   remote NFS server, and the share are available due to remote server conditions, such as a failed 
#   mount (e.g. /home/somedir --X--> /nfs4exports/somedir). If the remote test file is defined but 
#   cannot be reached, the backup will not proceed, and a log/syslog warning is issued. If this 
#   parameter is omitted, the remote test file check is skipped for the dataset, and the backup 
#   commences (given that the checks on the first two parameters pass OK).
#

BACKUPS=( "/mnt/backups/backup1|/opt/duplicity-backup/duplicity-backup.conf.backups1|.system-abc123-backup-testfile"
          "/mnt/backups/backup2|/opt/duplicity-backup/duplicity-backup.conf.backups1|" )

# Delimeter used for separating backup dataset details above.
DELIMITER="|"

# Custom/non-path location for the duplicity-backup command.  If 'duplicity-backup'
# or 'duplicity-backup.sh' is found on the path, the script will automatically use it
# if this variable is not set.
DUPLICITY_BACKUP_COMMAND=

# Use 'echo' to output the log entries to standard output, or 'log' to use the logfile.
LOGTYPE="log"

# Note: Effective only when 'log' is selected above! A fully qualified path to the log file.  
# If you don't define a log file, or define a location where a log file cannot be created,
# the script will echo the log messages to standard output regardless of LOGTYPE="log" above.
# If you use logging to a file, you may want to enable logrotate for this log file to prevent 
# the file from growing huge over time. 
LOGFILEPATH="/var/log/duplicity-nfs-backup.log"

# Set to true for extended logging; normally set to false for production use.
# When set to 'false', only error conditions and notification of successfully starting
# backup dataset are logged.
DEBUGLOG="true"

# Set to true to "dry-run" the test; script executes all the tests but does not actually
# execute the backup (a notification is issued to log/syslog). It is useful to set 
# 'DEBUGLOG' above to 'true' along with the test setting.
TEST="false"

# r/w test dummy file name
RW_TESTFILE="duplicity-nfs-backup_rw_testfile"
